#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 30 14:25:22 2020

@author: nog
"""

import sympy as sm
import sympy.physics.mechanics as me
import matplotlib.pyplot as plt
import numpy as np
from pydy.system import System

# L = [0.02, 0.05, 0.02, 0.03, 0.05, 0.03]
# ls = 0.02

L = sm.symbols('L:6')

lugs = np.array([[ L[0], -L[1],  L[2]],
                 [ L[0], -L[1], -L[2]],
                 [-L[3], -L[4],  L[5]],
                 [-L[3], -L[4], -L[5]]])

lugi = np.array([[ L[0], 0,  L[2]],
                 [ L[0], 0, -L[2]],
                 [-L[3], 0,  L[5]],
                 [-L[3], 0, -L[5]]])

# K = [0.1, 0.1, 0.1]

q = me.dynamicsymbols('q:6')

u = me.dynamicsymbols('u[0:6]')

K = sm.symbols('Kx:z')

mb, g, ls = sm.symbols('m_b, g, ls')

Ibx, Iby, Ibz = sm.symbols('Ib[x:z]')


# Create Reference
N = me.ReferenceFrame('N')
O = me.Point('O')
O.set_vel(N, 0*N.x + 0*N.y + 0*N.z)
Li = [O.locatenew('Ls1', lugi[0, 0] * N.x + lugi[0, 1] * N.y + lugi[0, 2] * N.z),
      O.locatenew('Ls2', lugi[1, 0] * N.x + lugi[1, 1] * N.y + lugi[1, 2] * N.z),
      O.locatenew('Ls3', lugi[2, 0] * N.x + lugi[2, 1] * N.y + lugi[2, 2] * N.z),
      O.locatenew('Ls4', lugi[3, 0] * N.x + lugi[3, 1] * N.y + lugi[3, 2] * N.z)]


# Create Block
B = N.orientnew('B', 'Body', (q[0], q[1], q[2]), '123')
B.set_ang_vel(N, q[0].diff() * N.x + q[1].diff() * N.y + q[2].diff() * N.z)
CMb = O.locatenew('CM_b', q[3]*N.x + q[4]*N.y + q[5]*N.z)
Ls = [CMb.locatenew('Ls1', lugs[0, 0] * B.x + lugs[0, 1] * B.y + lugs[0, 2] * B.z),
      CMb.locatenew('Ls2', lugs[1, 0] * B.x + lugs[1, 1] * B.y + lugs[1, 2] * B.z),
      CMb.locatenew('Ls3', lugs[2, 0] * B.x + lugs[2, 1] * B.y + lugs[2, 2] * B.z),
      CMb.locatenew('Ls4', lugs[3, 0] * B.x + lugs[3, 1] * B.y + lugs[3, 2] * B.z)]

Ib = me.inertia(B, Ibx, Iby, Ibz)
# bloco = me.Body('bloco', CMb, mb, N, Ib)
# bloco.apply_force(-mb * g * N.y, CMb)

block = me.RigidBody('block', CMb, B, mb, (Ib, CMb))

loads = [(CMb, -mb * g * N.y)]
# %%

CMb.set_vel(N, CMb.pos_from(O).dt(N))
CMb.vel(N)
# lugs in bloco

for i in range(4):
    # bloco.apply_force(K[0]*Ls[i].pos_from(Li[i]).dot(N.x)*N.x, Ls[i])
    # bloco.apply_force((K[1]*(ls - Ls[i].pos_from(Li[i]).dot(N.y))*N.y), Ls[i])
    # bloco.apply_force(K[2]*Ls[i].pos_from(Li[i]).dot(N.z)*N.z, Ls[i])
    loads.append((Ls[i], -K[0]*Ls[i].pos_from(Li[i]).dot(N.x)*N.x + K[1]*(ls - Ls[i].pos_from(Li[i]).dot(N.y))*N.y - K[2]*Ls[i].pos_from(Li[i]).dot(N.z)*N.z))
    Li[i].v2pt_theory(O, N, N)
    Ls[i].v2pt_theory(CMb, N, B)


# %%
eq0 = [sm.Eq(u[3], CMb.vel(N).dot(N.x)),
       sm.Eq(u[4], CMb.vel(N).dot(N.y)),
       sm.Eq(u[5], CMb.vel(N).dot(N.z))]


qdot0 = sm.solve(eq0, q[3].diff(), q[4].diff(), q[5].diff())


eq1 = [sm.Eq(u[0], B.ang_vel_in(N).dot(N.x)),
       sm.Eq(u[1], B.ang_vel_in(N).dot(N.y)),
       sm.Eq(u[2], B.ang_vel_in(N).dot(N.z))]
qdot1 = sm.solve(eq1, q[0].diff(), q[1].diff(), q[2].diff())



# %%

for i in range(4):
    Ls[i].set_vel(N, Ls[i].vel(N).subs(qdot0).simplify())
    Ls[i].set_vel(N, Ls[i].vel(N).subs(qdot0).simplify())

B.set_ang_vel(N, B.ang_vel_in(N).subs(qdot1).simplify())
CMb.set_vel(N, CMb.vel(N).subs(qdot0).simplify())


# %%
bodies = [block]


#kdes = [qd[0] - u[0],
#         I_b: [1.0, 1.0, 1.0]qd[1] - u[1],
#        qd[2] - u[2],
#        qd[3] - u[3],
#        qd[4] - u[4],
#        qd[5] - u[5]]

kdes = [eq1[0].rhs - eq1[0].lhs,
        eq1[1].rhs - eq1[1].lhs,
        eq1[2].rhs - eq1[2].lhs,
        eq0[0].rhs - eq0[0].lhs,
        eq0[1].rhs - eq0[1].lhs,
        eq0[2].rhs - eq0[2].lhs]

kane = me.KanesMethod(N, q, u, kd_eqs=kdes)
Fr, Frst = kane.kanes_equations(bodies, loads=loads)


# %%

sys = System(kane)


# %%

sys.constants = {mb: 1.0,
                 g: 9.81,
                 K[0]: 1.0,
                 K[1]: 10.0,
                 K[2]: 1.0,
                 L[0]: 0.02,
                 L[1]: 0.05,
                 L[2]: 0.02,
                 L[3]: 0.03,
                 L[4]: 0.05,
                 L[5]: 0.03,
                 ls: 0.03,
                 Ibx: 0.1,
                 Iby: 0.1,
                 Ibz: 0.1}

sys.initial_conditions = {q[0]: 0.0,
                          q[1]: 0.0,
                          q[2]: 0.0,
                          q[3]: 0.0,
                          q[4]: sys.constants[ls] + sys.constants[L[1]],
                          q[5]: 0.0,
                          u[0]: 0.0,
                          u[1]: 0.0,
                          u[2]: 0.0,
                          u[3]: 0.0,
                          u[4]: 0.0,
                          u[5]: 0.0}
#
#
sys.times = np.linspace(0, 10.0, 100000)
#
# # %%
x = sys.integrate()


plt.plot(sys.times, x[:, 0:3])
plt.plot(sys.times, x[:, 3:6])
plt.plot(sys.times, x[:, 6:9])
plt.plot(sys.times, x[:, 9:12])